package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/bilyardvmetro/ozon-Posts-And-Comments-test-project/graph/generated"
	"github.com/bilyardvmetro/ozon-Posts-And-Comments-test-project/graph/model"
	"github.com/bilyardvmetro/ozon-Posts-And-Comments-test-project/internal/logctx"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, body string, author string) (*model.Post, error) {
	if cu := currentUserName(ctx); cu != "" {
		author = cu
	}
	if title == "" {
		return nil, errors.New("title is required")
	}
	if len(body) == 0 {
		return nil, errors.New("body is required")
	}

	newPost := &model.Post{
		ID:             uuid.NewString(),
		Title:          title,
		Body:           body,
		Author:         author,
		CommentsClosed: false,
		CreatedAt:      time.Now().UTC(),
	}
	if err := r.Store.CreatePost(ctx, newPost); err != nil {
		return nil, err
	}
	return newPost, nil
}

// ToggleCommentsClosed is the resolver for the toggleCommentsClosed field.
func (r *mutationResolver) ToggleCommentsClosed(ctx context.Context, postID string, closed bool) (*model.Post, error) {
	post, err := r.Store.CloseComments(ctx, postID, closed)
	if err != nil {
		return nil, err
	}

	if post == nil {
		return nil, errors.New("post not found")
	}

	cu := currentUserName(ctx)
	if cu == "" || cu != post.Author {
		return nil, errors.New("forbidden: only post author can toggle comments")
	}

	return post, nil
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, postID string, parentID *string, body string, author string) (*model.Comment, error) {
	post, err := r.Store.GetPost(ctx, postID)
	if err != nil {
		return nil, err
	}
	if post == nil {
		return nil, errors.New("post not found")
	}
	if post.CommentsClosed {
		return nil, errors.New("comments are closed for this post")
	}

	if cu := currentUserName(ctx); cu != "" {
		author = cu
	}

	body = strings.TrimSpace(body)
	if body == "" {
		return nil, errors.New("comment body is required")
	}
	if len(body) > maxCommentLen {
		return nil, fmt.Errorf("comment body is too long (max %d)", maxCommentLen)
	}

	if parentID != nil && *parentID == "" {
		parentID = nil
	}

	if parentID != nil {
		parent, err := r.Store.GetComment(ctx, *parentID)
		if err != nil {
			return nil, err
		}
		if parent == nil || parent.PostID != postID {
			return nil, errors.New("invalid parentId")
		}
	}

	comment := &model.Comment{
		ID:        uuid.NewString(),
		PostID:    postID,
		ParentID:  parentID,
		Author:    author,
		Body:      body,
		CreatedAt: time.Now().UTC(),
	}

	if err := r.Store.CreateComment(ctx, comment); err != nil {
		return nil, err
	}

	go r.Bus.Publish(postID, *comment)
	return comment, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := r.Store.ListPosts(ctx)
	if err != nil {
		return nil, err
	}
	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post, err := r.Store.GetPost(ctx, id)
	if err != nil {
		return nil, err
	}
	return post, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, postID string, parentID *string, after *string, first *int) (*model.CommentPage, error) {
	limit := 20
	if first != nil && *first > 0 {
		limit = *first
	}

	commentsPage, err := r.Store.ListComments(ctx, postID, parentID, after, limit)
	if err != nil {
		return nil, err
	}
	return commentsPage, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	log := logctx.From(ctx, r.Logger).With().
		Str("op", "subscriptionForComment").
		Str("postID", postID).
		Logger()

	log.Info().Str("postId", postID).Msg("subscription for post")

	channel := make(chan *model.Comment, 1)

	unsubscribe := r.Bus.Subscribe(
		postID,
		func(comment model.Comment) {
			log.Debug().
				Str("comment_id", comment.ID).
				Msg("push")
			commentCopy := comment
			channel <- &commentCopy
		},
	)

	// отписать клиента, когда он отрубится
	go func() {
		<-ctx.Done()
		log.Info().Str("potsId", postID).Msg("unsubscribe from post")
		unsubscribe()
		close(channel)
	}()
	return channel, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *Resolver) CommentsCount(ctx context.Context, post *model.Post) (int, error) {
	if post.CommentsCount != 0 {
		return post.CommentsCount, nil
	}

	loaders := GetLoaders(ctx)
	if loaders == nil || loaders.CommentsCount == nil {
		m, err := r.Store.BatchCommentsCount(ctx, []string{post.ID})
		if err != nil {
			return 0, err
		}
		return m[post.ID], nil
	}

	return loaders.CommentsCount.Load(ctx, post.ID)
}
*/
